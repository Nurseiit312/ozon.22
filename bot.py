import os
import django
import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ozonshop.settings")
django.setup()

TELEGRAM_BOT_TOKEN = "YOUR_BOT_TOKEN"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω
DJANGO_API_URL = "http://127.0.0.1:8000/api"

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/products ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/balance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    )

def fetch_products():
    try:
        r = requests.get(f"{DJANGO_API_URL}/products/")
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def show_products(update: Update, context: CallbackContext):
    products = fetch_products()
    if not products:
        update.message.reply_text("–¢–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã :(")
        return

    keyboard = [
        [InlineKeyboardButton(f"{p['name']} ‚Äî {p['price']}‚ÇΩ", callback_data=f"buy_{p['id']}")]
        for p in products
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    telegram_user_id = query.from_user.id
    username = query.from_user.username or ""
    data = query.data

    if data.startswith("buy_"):
        product_id = int(data.split("_")[1])

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ—Ç)
        try:
            requests.post(
                f"{DJANGO_API_URL}/telegram-users/",
                json={"telegram_id": telegram_user_id, "username": username}
            )
        except:
            pass  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        order_data = {
            "telegram_id": telegram_user_id,
            "items": [{"product": product_id, "quantity": 1}]
        }

        try:
            r = requests.post(f"{DJANGO_API_URL}/orders/", json=order_data)
            if r.status_code == 201:
                query.edit_message_text("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã.")
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                try:
                    err = r.json().get("detail") or r.text
                except:
                    err = r.text
                query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ: {err}")
        except Exception as e:
            query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def show_balance(update: Update, context: CallbackContext):
    telegram_user_id = update.effective_user.id
    try:
        r = requests.get(f"{DJANGO_API_URL}/telegram-users/{telegram_user_id}/balance/")
        r.raise_for_status()
        data = r.json()
        balance = data.get("balance", "0.00")
        update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("products", show_products))
    dp.add_handler(CommandHandler("balance", show_balance))
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
